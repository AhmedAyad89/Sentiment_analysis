#laptops best
# batch:200
#iter:2500
def config_single_graph():
	paths = []

	path = {}
	path['input_dim'] = 4096
	path['name'] = 'shared1'
	path['computation'] = construct_path(path['name'], [512, 512], batch_norm=True, dropout=True, dropout_rate=0.33, noise=False, noise_std=0.16)
																			 #,ker_reg=tf.contrib.layers.l1_l2_regularizer(scale_l1=0.001, scale_l2=0.005, scope=None))
	path['input'] = 'hannah_organic'
	paths.append(path)


	path = {}
	path['name'] = 'entities'
	path['input'] = 'shared1'
	path['input_dim'] = 512
	path['computation'] = construct_path(path['name'], [22], batch_norm=False, activation=None)
																			 #,ker_reg=tf.contrib.layers.l1_l2_regularizer(scale_l1=0.0001, scale_l2=0.0005, scope=None))
	path['optimizer'] = tf.train.AdamOptimizer(name='path2_optimizer', learning_rate=0.000001)
	path['loss'] = loss_map('sigmoid')
	#path['loss_computation'] = tf.nn.sigmoid_cross_entropy_with_logits
	path['predictor'] = sigmoid_predictor()
	paths.append(path)

	path = {}
	path['name'] = 'attributes'
	path['input'] = 'shared1'
	path['input_dim'] = 512
	path['computation'] = construct_path(path['name'], [9], batch_norm=False, activation=None)
																			 #,ker_reg=tf.contrib.layers.l1_l2_regularizer(scale_l1=0.00001, scale_l2=0.0005, scope=None))
	path['optimizer'] = tf.train.AdamOptimizer(name='path3_optimizer', learning_rate=0.000001)
	path['loss'] = loss_map('sigmoid')
	#path['loss_computation'] = tf.nn.sigmoid_cross_entropy_with_logits
	path['predictor'] = sigmoid_predictor()
	paths.append(path)

	path = {}
	path['name'] = 'aspects'
	path['input'] = 'shared1'
	path['input_dim'] = 512
	path['computation'] = construct_path(path['name'], [88], batch_norm=False, activation=None)
																			 #,ker_reg=tf.contrib.layers.l1_l2_regularizer(scale_l1=0.0001, scale_l2=0.0005, scope=None))
	path['optimizer'] = tf.train.AdamOptimizer(name='path4_optimizer', learning_rate=0.0001 , beta1=0.85 , beta2=0.995)
	path['loss'] = loss_map('sigmoid')
	path['predictor'] = sigmoid_predictor()
	paths.append(path)

	return paths